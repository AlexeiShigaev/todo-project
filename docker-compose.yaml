version: "3.9"

services:

# ********************************************************************
# Контейнер Postgresql
# ********************************************************************
  pgdb:
    image: postgres:15.1-alpine
    restart: unless-stopped
    #    volumes:
    #      - postgres_data:/var/lib/postgresql/data/
    #      - .:/docker-entrypoint-initdb.d
    environment:
      # поправим временную зону
      TZ: "GMT+3"
      PGTZ: "GMT+3"
      # стартовые дэфолтные ключи от танка
      POSTGRES_DB: "tododb"
      POSTGRES_USER: "todopguser"
      POSTGRES_PASSWORD: "pgpwd4test"
    ports:
      - "5432:5432"


# ********************************************************************
# Контейнер pgAdmin
# ********************************************************************
#  pgadmin:
#    image: dpage/pgadmin4:8.2
#    environment:
#      PGADMIN_DEFAULT_EMAIL: "testpguser@gmail.com"
#      PGADMIN_DEFAULT_PASSWORD: "pgadminpwd4test"
#      PGADMIN_CONFIG_SERVER_MODE: "False"
#    ports:
#      - "5050:80"
#    depends_on:
#      - pgdb


# ********************************************************************
# Приложение с django внутри контейнера
# ********************************************************************
  app:
    build:
      context: ./
      dockerfile: ./todo_app/Dockerfile
    environment:
      DJANGO_SUPERUSER_USERNAME: "admin"
      DJANGO_SUPERUSER_PASSWORD: "passqw12"
      DJANGO_SUPERUSER_EMAIL: "admin@admin.com"
    command: sh -c /app/app_run.sh
    ports:
      - "8000:8000"
    depends_on:
      - pgdb


volumes:
  postgres_data:




# ********************************************************************
# очень интересный вариант, для потом
# ********************************************************************

#version: '3.9'
#services:
#  postgres-db:
#    container_name: ${POSTGRES_HOST}
#    image: postgres:9.5
#    restart: always
#    ports:
#      - "5432:5432"
#    command: postgres
#    expose:
#      - 5432
#    environment:
#      POSTGRES_USER: "${POSTGRES_USER}"
#      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
#      POSTGRES_DB: "${POSTGRES_DB}"
#
#      #this ENV variable is only required for the healthcheck section - if you don't specify it, the check command will fail stating the root user doesn't exist in posgres
#      PGUSER: "postgres"
#    healthcheck:
#      #CHANGE 1: this command checks if the database is ready, right on the source db server
#      test: [ "CMD-SHELL", "pg_isready" ]
#      interval: 5s
#      timeout: 5s
#      retries: 5
#
#  liquibase:
#    container_name: liquibase-schema-config
#    image: company/liquibase
#    build:
#      context: ./liquibase
#    environment:
#      - PGPASSWORD=${POSTGRES_PASSWORD}
#      - PGPORT=${POSTGRES_PORT}
#      - PGHOST=${POSTGRES_HOST}
#      - PGUSER=${POSTGRES_USER}
#      - PGDATABASE=${POSTGRES_DB}
#
#      - JDBC_URL=jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/
#      - LIQUIBASE_HOME=${LIQUIBASE_HOME}
#    depends_on:
#      #CHANGE 2: it prevents issuing a request while the server is starting to depend on the healthy status of postgres-db
#      postgres-db:
#        condition: service_healthy
